// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace Example
{
    public partial class Vector2i
    {
        public int X { get; set; }

        public int Y { get; set; }

    }

    public partial class Vector3f
    {
        public float X { get; set; }

        public float Y { get; set; }

        public float Z { get; set; }

    }

    public partial class Vector2f
    {
        public float X { get; set; }

        public float Y { get; set; }

    }

    public partial class RectF
    {
        public float X { get; set; }

        public float Y { get; set; }

        public float Width { get; set; }

        public float Height { get; set; }

    }

    /// <summary>	地图道具</summary>
    public partial class MapItem
    {
        /// <summary>	地图上道具的唯一ID				服务器可用	2017-03-30</summary>
        public int Id { get; set; }

        /// <summary>	计数器							服务器可用	2017-03-30				需要进一步明确</summary>
        public int RequiredKey { get; set; }

        /// <summary>	地图上的位置					服务器可用	2017-03-30</summary>
        public Example.Vector3f Center { get; set; }

        /// <summary>	触发区域						服务器可用	2017-03-30</summary>
        public Example.Vector3f Size { get; set; }

        /// <summary>	资源路径</summary>
        public string Path { get; set; }

    }

    public partial class MapWall
    {
        /// <summary>	地图上空气墙的唯一ID				服务器可用	2017-03-30</summary>
        public int Id { get; set; }

        /// <summary>	计数器								服务器可用	2017-03-30				需要进一步明确</summary>
        public int RequiredKey { get; set; }

        /// <summary>	地图上的位置						服务器可用	2017-03-30</summary>
        public Example.Vector3f Center { get; set; }

        /// <summary>	触发区域							服务器可用	2017-03-30</summary>
        public Example.Vector3f Size { get; set; }

        /// <summary>	空气墙的朝向						服务器可用	2017-03-30</summary>
        public Example.Vector3f Rotation { get; set; }

        /// <summary>	一进副本就显示出来					服务器可用	2017-03-30</summary>
        public bool Autoshow { get; set; }

        /// <summary>	资源路径</summary>
        public string EffectPath { get; set; }

    }

    public partial class MapAudioSource
    {
        public int Id { get; set; }

        public string Path { get; set; }

        public Example.Vector3f Pos { get; set; }

        public bool Autoshow { get; set; }

        public float MinDistance { get; set; }

        public float MaxDistance { get; set; }

        public float Volume { get; set; }

        public int Loop { get; set; }

        public int RolloffMode { get; set; }

    }

    public partial class ContentValue
    {
        public bool BoolValue { get; set; }

        public int IntValue { get; set; }

        public string StrValue { get; set; }

        public float FloatValue { get; set; }

        public Example.Vector3f Vector3Value { get; set; }

    }

    /// <summary>	地图事件Action</summary>
    public partial class MapEventAction
    {
        public enum Type
        {
            UNKNOWN = 0,
            /// <summary>	清空空气墙			服务器可用	2017-03-30</summary>
            CLEARWALL = 1,
            /// <summary>	掉落道具			服务器可用	2017-03-30</summary>
            DROP_ITEM = 2,
            SHOW_PICKUP = 3,
            HIDE_PICKUP = 4,
            /// <summary>	显示需要的道具		服务器可用	2017-03-30</summary>
            SHOW_USEITEM = 5,
            /// <summary>	隐藏需要的道具		服务器可用	2017-03-30</summary>
            HIDE_USEITEM = 6,
            DESTROY_TRIGGER = 7,
            RESET_TRIGGER = 8,
            /// <summary>	显示空气墙			服务器可用	2017-03-30</summary>
            SHOW_WALL = 9,
            /// <summary>	打开NPC组			服务器可用	2017-03-30</summary>
            OPEN_NPC_GROUP = 10,
            /// <summary>	播放剧情</summary>
            PLAY_SEQUENCE = 11,
            SHOW_UI = 12,
            HIDE_UI = 13,
            /// <summary>	显示路径点			服务器可用	2017-03-30</summary>
            SHOW_WAYPOINT = 14,
            /// <summary>	启动自动战斗</summary>
            START_AUTOFIGHT = 15,
            /// <summary>	关闭自动战斗</summary>
            STOP_AUTOFIGHT = 16,
            /// <summary>	加BUFF				服务器可用	2017-03-30</summary>
            ADD_BUFF = 17,
            /// <summary>	改变阵营			服务器可用	2017-03-30</summary>
            CHANGE_FRACTION = 18,
            /// <summary>	播放动作</summary>
            PLAY_ACTION = 19,
            /// <summary>	移动到某个点		服务器可用	2017-03-30</summary>
            MOVE_TO = 20,
            SHOW_TALK_WORD = 21,
            /// <summary>	关闭助战			服务器可用	2017-03-30</summary>
            FREEZE_AI = 22,
            /// <summary>	进入到了某个BOSS的警戒区域</summary>
            SET_ASBOSS = 23,
            /// <summary>	删除BUFF			服务器可用	2017-03-30</summary>
            DEL_BUFF = 24,
            ACCEPT_TASK = 25,
            SUBMIT_TASK = 26,
            GET_NPCFUNCS = 27,
            FLY_TO = 28,
            PLAY_EFFECT = 29,
            TRANSFER_TO = 30,
            SHOW_TRANSFER = 31,
            HIDE_TRANSFER = 32,
            EXECUTE_EVENT = 33,
            SHOW_PROP_UI = 34,
            CAMERA_SETTING = 35,
            PLAY_SKILL = 36,
            REGULAR_FLY = 38,
            ACTIVE_GAMEOBJECT = 39,
            BRAKE_GAMEOBJECT = 40,
            STOP_MOVE = 41,
            CHANGE_AUDIO = 42,
            OPEN_MUSIC = 43,
            STOP_MUSIC = 45,
            RESET_TASK = 46,
            BEGIN_GUIDE = 47,
            CLEAN_MAP = 48,
            SUBMIT_DUNGENON = 49,
        }

        /// <summary>	目标</summary>
        public string Target { get; set; }

        /// <summary>	类型</summary>
        public Example.MapEventAction.Type ActionType { get; set; }

        /// <summary>	参数</summary>
        public List<Example.ContentValue> Args { get; set; }

        /// <summary>	延迟时间</summary>
        public int DelayTime { get; set; }

    }

    /// <summary>	地图事件条件</summary>
    public partial class MapEventCondition
    {
        public enum Condition
        {
            UNKNOWN = 0,
            /// <summary>	相等</summary>
            EQUAL = 1,
            /// <summary>	不相等</summary>
            EQUAL_NOT = 2,
            /// <summary>	大</summary>
            BIGGER = 3,
            /// <summary>	小</summary>
            LITTLE = 4,
            /// <summary>	大于等于</summary>
            BIGGER_EQUAL = 5,
            /// <summary>	小于等于</summary>
            LITTLE_EQUAL = 6,
            /// <summary>	包含</summary>
            CONTAIN = 7,
            /// <summary>	不包含</summary>
            NOT_CONTAIN = 8,
            /// <summary>	或</summary>
            COMPOSITE_OR = 9,
            /// <summary>	与</summary>
            COMPOSITE_AND = 9,
        }

        /// <summary>	条件类型</summary>
        public Example.MapEventCondition.Condition Type { get; set; }

        public string Name { get; set; }

        /// <summary>	参数1</summary>
        public Example.ContentValue Arg1 { get; set; }

        /// <summary>	参数2	目前只用了这个参数	2017-03-30</summary>
        public Example.ContentValue Arg2 { get; set; }

        /// <summary>	暂时没有用到				2017-03-30</summary>
        public List<Example.MapEventCondition> Composites { get; set; }

    }

    /// <summary>	地图事件</summary>
    public partial class MapEvent
    {
        public enum SendType
        {
            /// <summary>	单播</summary>
            SELF = 0,
            /// <summary>	队伍</summary>
            TEAM = 1,
            /// <summary>	广播-场景内</summary>
            SCENE = 2,
        }

        public int Id { get; set; }

        public int EventType { get; set; }

        public string Target { get; set; }

        /// <summary>	地图事件触发的条件判断</summary>
        public List<Example.MapEventCondition> Conditions { get; set; }

        /// <summary>	地图事件执行的指令</summary>
        public List<Example.MapEventAction> Actions { get; set; }

        /// <summary>	可执行次数</summary>
        public int ExecuteCount { get; set; }

        /// <summary>	是否拦截消息的传递</summary>
        public bool Interception { get; set; }

        /// <summary>	发送类型</summary>
        public Example.MapEvent.SendType sendType { get; set; }

    }

    /// <summary>	触发器</summary>
    public partial class MapActionTrigger
    {
        public enum Type
        {
            UNKNOWN = 0,
            ENTER_TRIGGER = 1,
            OUT_TRIGGER = 2,
            BORN = 3,
            DEAD = 4,
            PICKUP = 5,
            USE_ITEM = 6,
            ATTACK = 7,
            BEHIT = 8,
            ENTER_SCENE = 9,
            LEAVE_SCENE = 10,
            DICE_RESULT = 11,
            STORY_OVER = 12,
            DICE_WINNER = 13,
            DROP_HP_TO = 14,
            TASK_STATUS_UPDATE = 15,
            INIT_SCENE = 16,
            DESTROY_SCENE = 17,
            CALL = 1000,
        }

        public int Id { get; set; }

        public Example.MapActionTrigger.Type EventType { get; set; }

        public string Target { get; set; }

        public Example.ContentValue Value { get; set; }

        public int TriggerEventId { get; set; }

        public List<Example.MapEventAction> Actions { get; set; }

    }

    public partial class MapEntityEvent
    {
        public enum Type
        {
            UNKNOWN_TYPE = 0,
            PLAYER = 1,
            NPC = 2,
            ITEM = 3,
            WALL = 4,
            TRIGGER = 5,
            TEAM = 6,
            NPCGROUP = 7,
        }

        public int TargetId { get; set; }

        public Example.MapEntityEvent.Type TargetType { get; set; }

        public List<Example.MapActionTrigger> Triggers { get; set; }

    }

    /// <summary>	关于地图范围的地图事件</summary>
    public partial class MapTrigger
    {
        public enum Type
        {
            UNKNOWN_TYPE = 0,
            EVENT = 1,
            AREA = 2,
        }

        public enum Shape
        {
            UNKNOWN_SHAPE = 0,
            CIRCLE = 1,
            BOX = 2,
        }

        public int Id { get; set; }

        public Example.MapTrigger.Type type { get; set; }

        public Example.MapTrigger.Shape shape { get; set; }

        public string Data { get; set; }

        public Example.Vector3f Center { get; set; }

        public float Radius { get; set; }

        public Example.Vector3f Size { get; set; }

        public Example.Vector3f Rotation { get; set; }

        public List<Example.MapEventAction> InActions { get; set; }

        public List<Example.MapEventAction> OutActions { get; set; }

        public string ObjPath { get; set; }

        public bool AutoShow { get; set; }

    }

    public partial class MapArea
    {
        public enum Type
        {
            EARTH = 0,
            WOOD = 1,
            ROCK = 2,
            GRASS = 3,
            WATER = 4,
            METAL = 5,
        }

        public enum Shape
        {
            UNKNOWN_SHAPE = 0,
            CIRCLE = 1,
            BOX = 2,
        }

        public int Id { get; set; }

        public Example.MapArea.Type type { get; set; }

        public Example.MapArea.Shape shape { get; set; }

        public Example.Vector3f Center { get; set; }

        public float Radius { get; set; }

        public Example.Vector3f Size { get; set; }

        public Example.Vector3f Rotation { get; set; }

        public string Audio { get; set; }

    }

    public partial class MapTile
    {
        public Example.MapArea.Type Type { get; set; }

    }

    public partial class MapTiles
    {
        public int Row { get; set; }

        public int Column { get; set; }

        public float CellSize { get; set; }

        public Example.Vector3f Pos { get; set; }

        public List<int> Tiles { get; set; }

    }

    public partial class MapObject
    {
        public enum Type
        {
            UNKNOWN = 0,
            WALL = 1,
            TRIGGER = 2,
            TRANSFER = 3,
            NAVPATH = 4,
            GAMEOBJECT = 5,
        }

        public enum Status
        {
            DISABLE = 0,
            ENABLE = 1,
        }

        public Example.MapObject.Type type { get; set; }

        public int Id { get; set; }

        public string Name { get; set; }

        public Example.MapObject.Status status { get; set; }

    }

    public partial class MapEventData
    {
        public List<Example.MapWall> Walls { get; set; }

        public List<Example.MapEvent> Events { get; set; }

        public List<Example.MapTrigger> Triggers { get; set; }

        public List<Example.MapEntityEvent> EntityEvents { get; set; }

        public List<Example.MapItem> Items { get; set; }

        public List<Example.MapAudioSource> AudioSources { get; set; }

        public List<Example.MapArea> Areas { get; set; }

    }

    public partial class StringID
    {
        public string Id { get; set; }

    }

    public partial class AllStringID
    {
        /// <summary>	索引为id</summary>
        public List<Example.StringID> Ids { get; set; }

    }

    public partial class SkillShapeNew
    {
        public enum ShapeType
        {
            NONE = 0,
            CIRCLE = 1,
            BOX = 2,
            SECTOR = 3,
            TRIANGLE = 4,
        }

        public Example.SkillShapeNew.ShapeType shapeType { get; set; }

        public float Radius { get; set; }

        public float Width { get; set; }

        public float Height { get; set; }

        public float Angle { get; set; }

    }

    public partial class SkillPath
    {
        public enum PathType
        {
            NONE = 0,
            LINE = 1,
            FOLLOW = 2,
            HELIX = 3,
            SCALE = 4,
            PARABOLA = 5,
            FIXED_POSITION = 6,
        }

        public Example.SkillPath.PathType pathType { get; set; }

        public List<Example.ContentValue> Args { get; set; }

    }

    public partial class SkillAction
    {
        public enum ActionType
        {
            UNKNOWN = 0,
            PLAY_ACTION = 1,
            PLAY_EFFECT = 2,
            HIT_POINT = 3,
            MOVE_LIMIT = 4,
            CANCEL_LIMIT = 5,
            ADD_BUFF = 6,
            MAKE_SKILL = 7,
            WAIT_COMBO = 8,
            PLAY_SOUND = 9,
            SHOW_WARNING = 10,
            SUMMONED = 12,
            JUMP = 11,
            CHARGE = 12,
            EMIT_PARTICLE = 13,
            CAMERA_SHAKE = 14,
            CAMERA_BLUR = 15,
            CAMERA_BLACK = 16,
        }

        public Example.SkillAction.ActionType actionType { get; set; }

        public int StartTime { get; set; }

        public int Duration { get; set; }

        /// <summary>
        /// <para> PLAY_ACTION(string actionName,int fadeTime)</para>
        /// <para> PLAY_EFFECT(string effectName)</para>
        /// <para> HIT_POINT(int particleID,string hitEffect,int32 hitTime,string...buffIDs)</para>
        /// <para> ADD_MOVE_LIMIT()</para>
        /// <para> CANCEL_LIMIT()</para>
        /// <para> ADD_BUFF(targetType,string buffID)</para>
        /// <para> MAKE_SKILL(string skillID)</para>
        /// <para> WAIT_COMBO(string skillID)</para>
        /// <para> PLAY_SOUND(string audioName)</para>
        /// <para> SHOW_WARNING(int warningType,string effectName)</para>
        /// <para> SUMMONED(int summonedType,string summonedID,int count)</para>
        /// <para> JUMP(float distance,float height)</para>
        /// <para> CHARGE(float distance)</para>
        /// <para> EMIT_PARTICLE(int emitterID)</para>
        /// </summary>
        public List<Example.ContentValue> Args { get; set; }

    }

    public partial class SkillParticle
    {
        public int Id { get; set; }

        public int StartTime { get; set; }

        public int Duration { get; set; }

        public List<Example.SkillAction> Actions { get; set; }

        public string Effect { get; set; }

        public Example.SkillPath Path { get; set; }

        public Example.SkillShapeNew HitShape { get; set; }

        public bool IsBullet { get; set; }

    }

    public partial class SkillParticleEmitter
    {
        public enum EmitterType
        {
            FIXED = 0,
            RANDOM = 1,
        }

        public int Id { get; set; }

        public int StartTime { get; set; }

        public int Duration { get; set; }

        public Example.SkillParticleEmitter.EmitterType emitterType { get; set; }

        public Example.SkillShapeNew EmitterShape { get; set; }

        public Example.Vector3f EmitterPosition { get; set; }

        public int MaxCount { get; set; }

        public Example.SkillParticle Template { get; set; }

        public List<Example.SkillParticle> Particles { get; set; }

    }

    public partial class SkillEvent
    {
        public enum EventType
        {
            UNKNOWN = 0,
            SKILL_OVER = 1,
            ACTION_OVER = 2,
            PARTICLE_OVER = 3,
        }

        public int Id { get; set; }

        public Example.SkillEvent.EventType eventType { get; set; }

        public List<Example.ContentValue> Conditions { get; set; }

        public List<Example.SkillAction> Actions { get; set; }

    }

    public partial class Skill
    {
        public enum SkillType
        {
            NONE = 0,
            GENERAL = 1,
        }

        public enum TargetType
        {
            EMEMY = 0,
            FRIEND = 1,
            SELF = 2,
        }

        public int Id { get; set; }

        public Example.Skill.SkillType skillType { get; set; }

        public int TargetMask { get; set; }

        public int CastingDistance { get; set; }

        public int SkillCD { get; set; }

        public int SkillTime { get; set; }

        public List<Example.SkillAction> Actions { get; set; }

        public List<Example.SkillParticleEmitter> Emitters { get; set; }

        public List<Example.SkillEvent> Events { get; set; }

    }

    public partial class SkillID
    {
        public int Id { get; set; }

        public string StrID { get; set; }

    }

    public partial class SkillIDS
    {
        public List<Example.SkillID> Skills { get; set; }

    }

    /// <summary>
    /// <para>	///////////////////////////</para>
    /// <para>	技能静态数据</para>
    /// <para>	///////////////////////////</para>
    /// </summary>
    public partial class SkillArtEffect
    {
        public enum EffPos
        {
            FEET = 0,
            BODY = 1,
            HEIGHT = 2,
        }

        /// <summary>	特效名</summary>
        public int Effect { get; set; }

        /// <summary>	技能的动作和特效持续时间</summary>
        public int PhaseTime { get; set; }

        /// <summary>	特效的绑定点</summary>
        public Example.SkillArtEffect.EffPos effPos { get; set; }

        /// <summary>	特效高度</summary>
        public float Height { get; set; }

    }

    public partial class SkillCameraAction
    {
        public enum CameraAction
        {
            CAMERAACTION_NONE = 0,
            CAMERAACTION_Y = 1,
            CAMERAACTION_SHAKE = 2,
            CAMERAACTION_BLUR = 3,
            CAMERAACTION_PAUSE = 4,
            CAMERAACTION_BLUR_COLOR = 5,
        }

        public Example.SkillCameraAction.CameraAction Action { get; set; }

        public float Param { get; set; }

        public float Delay { get; set; }

        public float Duration { get; set; }

        public float Param2 { get; set; }

    }

    public partial class SkillArt
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        /// <summary>	技能开始动作</summary>
        public string GuideAction { get; set; }

        /// <summary>	技能释放动作</summary>
        public string GuidingAction { get; set; }

        /// <summary>	技能收手动作</summary>
        public string EndAction { get; set; }

        /// <summary>	技能开始阶段效果</summary>
        public List<Example.SkillArtEffect> BeginEffect { get; set; }

        /// <summary>	技能粒子特效</summary>
        public Example.SkillArtEffect UnitEffect { get; set; }

        /// <summary>	技能结束阶段效果</summary>
        public Example.SkillArtEffect EndEffect { get; set; }

        /// <summary>	命中特效</summary>
        public Example.SkillArtEffect HitEffect { get; set; }

        /// <summary>	预警特效</summary>
        public Example.SkillArtEffect TipEffect { get; set; }

        /// <summary> 	预警参考点</summary>
        public Example.SkillUnit.ReferPoint TipReferPoint { get; set; }

        /// <summary>	开始阶段镜头动作类型</summary>
        public List<Example.SkillCameraAction> CameraAction { get; set; }

        /// <summary> 技能开始动作与上一个动作的动画混合时间</summary>
        public float GuideFadeTime { get; set; }

        /// <summary> 技能特效音频</summary>
        public int SkillAudio { get; set; }

        /// <summary> 命中特效音频</summary>
        public int HitAudio { get; set; }

    }

    public partial class SkillGuidePolicy
    {
        public enum GuideType
        {
            NORMAL = 1,
            /// <summary>	guideTime + guidingTime 后进入move state</summary>
            SING = 2,
            /// <summary>		guideTime + guidingTime 后进入move state, guideTime 结束之后读条，读条时间是 guidingTime,此时可以被打断</summary>
            GUIDE = 3,
        }

        /// <summary>	guideTime 后进入move state，move state 和引导的 guidingTime 时间同步</summary>
        public Example.SkillGuidePolicy.GuideType Type { get; set; }

        /// <summary>	起手时间</summary>
        public int GuideTime { get; set; }

        /// <summary>	引导持续时间</summary>
        public int GuidingTime { get; set; }

        /// <summary>	收手时间</summary>
        public int EndTime { get; set; }

    }

    public partial class SkillShape
    {
        public enum Area
        {
            /// <summary>	长方形</summary>
            QUADRATE = 0,
            /// <summary>	圆</summary>
            CIRCLE = 1,
            /// <summary>	三角</summary>
            TRIANGLE = 2,
            /// <summary>	扇形</summary>
            SECTOR = 3,
        }

        public Example.SkillShape.Area area { get; set; }

        /// <summary>	长方形的长 圆的半径 三角形的高 扇形的半径</summary>
        public float Param1 { get; set; }

        /// <summary>	长方形的宽 三角形的底</summary>
        public float Param2 { get; set; }

        /// <summary>	扇形的角度，是否倒三角</summary>
        public float Param3 { get; set; }

    }

    public partial class SkillCancelPolicy
    {
        /// <summary>	技能在受到伤害后是否会被取消</summary>
        public bool HurtCancel { get; set; }

        /// <summary>	技能在移动后是否会被取消</summary>
        public bool MoveCancel { get; set; }

        /// <summary>	技能是否可以主动取消</summary>
        public bool InitiativeCancel { get; set; }

    }

    public partial class SkillMovePolicy
    {
        /// <summary>	引导抬手阶段是否可移动</summary>
        public bool GuideBeginCanMove { get; set; }

        /// <summary>	引导阶段持续是否可移动</summary>
        public bool GuideCanMove { get; set; }

    }

    public partial class SkillCombPolicy
    {
        /// <summary>	自动连接下一个技能</summary>
        public int AutoNextSkill { get; set; }

        /// <summary>	在规定时间间隔内主动触发的技能id</summary>
        public int CombSkill { get; set; }

        /// <summary>	能连击上的间隔时间, 对next有数值时有效, next 有效范围 [0 - ~]</summary>
        public int MaxCombTime { get; set; }

    }

    public partial class SkillResult
    {
        /// <summary>	攻击者进入move后给自己添加状态</summary>
        public List<int> SelfStatus { get; set; }

        /// <summary>	StatusInfo -> ID	串联</summary>
        public List<int> TStatusSerial { get; set; }

        /// <summary>	StatusInfo -> ID	并联</summary>
        public List<int> TStatusParallel { get; set; }

    }

    public partial class SkillUnit
    {
        public enum LaunchType
        {
            /// <summary>	此条件无需判断</summary>
            LAUNCH_NONE = 0,
            /// <summary>	单线</summary>
            SINGLELINE = 1,
            /// <summary>	多线</summary>
            MULLINE = 2,
            /// <summary>	近战攻击</summary>
            MELEE = 3,
            /// <summary>	旋转</summary>
            ROTATION = 4,
            /// <summary>	区域</summary>
            AREA = 5,
            /// <summary>	跳跃</summary>
            JUMP = 6,
            /// <summary>	曲线</summary>
            HELIX = 7,
            /// <summary>	范围随机</summary>
            AREA_RANDSKILL = 8,
            /// <summary>	跟随</summary>
            FOLLOW = 9,
            /// <summary>背刺</summary>
            BACK_STAB = 10,
        }

        public enum TargetType
        {
            /// <summary>	0.自己</summary>
            MYSELF = 0,
            /// <summary>	友方</summary>
            FRIEND = 1,
            /// <summary>	敌方</summary>
            ENEMY = 2,
        }

        public enum ReferPoint
        {
            SELF = 0,
            POSITION = 1,
            TARGET = 2,
        }

        public enum BasePoint
        {
            CENTER = 0,
            EDGE = 1,
        }

        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        /// <summary>	子表引用Id</summary>
        public int ReferId { get; set; }

        /// <summary>	发射类型</summary>
        public Example.SkillUnit.LaunchType launchType { get; set; }

        /// <summary>	技能美术表现ID</summary>
        public int ArtId { get; set; }

        /// <summary>	技能CD MS</summary>
        public int Cd { get; set; }

        /// <summary> 	技能时间 fireActionTime</summary>
        public int SkillTime { get; set; }

        /// <summary>	施法判定距离</summary>
        public float Distance { get; set; }

        /// <summary>	目标类型</summary>
        public Example.SkillUnit.TargetType targetType { get; set; }

        /// <summary> 	技能引导策略</summary>
        public Example.SkillGuidePolicy GuidePolicy { get; set; }

        /// <summary> 	技能效果</summary>
        public Example.SkillResult SkillResult { get; set; }

        /// <summary> 	技能连击策略</summary>
        public Example.SkillCombPolicy CombPolicy { get; set; }

        /// <summary> 	技能的打断策略</summary>
        public Example.SkillCancelPolicy CancelPolicy { get; set; }

        /// <summary> 	技能的移动策略</summary>
        public Example.SkillMovePolicy MovePolicy { get; set; }

    }

    public partial class SkillLine
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        /// <summary>	运动阶段的持续时间</summary>
        public int MoveTime { get; set; }

        /// <summary>	运动阶段的速率</summary>
        public float Speed { get; set; }

        /// <summary>	粒子波次</summary>
        public int Waves { get; set; }

        /// <summary>  波次间隔时间</summary>
        public int WaveDelay { get; set; }

        /// <summary>	技能最大作用数量</summary>
        public int MaxInfluence { get; set; }

        /// <summary>	技能是否可穿透</summary>
        public bool CanPierce { get; set; }

        /// <summary> 碰撞体</summary>
        public Example.SkillShape HitArea { get; set; }

        /// <summary> 粒子偏移量</summary>
        public Example.Vector3f Offset { get; set; }

    }

    public partial class SkillMultiLine
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        /// <summary>	运动阶段的持续时间</summary>
        public int MoveTime { get; set; }

        /// <summary>	运动阶段的速率</summary>
        public float Speed { get; set; }

        /// <summary>	技能粒子数, 线数</summary>
        public int UnitCount { get; set; }

        /// <summary>  粒子波次, 每条线中的粒子数</summary>
        public int Waves { get; set; }

        /// <summary>  波次间隔时间</summary>
        public int WaveDelay { get; set; }

        /// <summary>	技能最大作用数量</summary>
        public int MaxInfluence { get; set; }

        /// <summary>	技能是否可穿透</summary>
        public bool CanPierce { get; set; }

        /// <summary> 碰撞体</summary>
        public Example.SkillShape HitArea { get; set; }

        /// <summary> 多线形状区域</summary>
        public Example.SkillShape Shape { get; set; }

        /// <summary> 粒子偏移量</summary>
        public Example.Vector3f Offset { get; set; }

    }

    public partial class SkillArea
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        public Example.SkillUnit.ReferPoint ReferPoint { get; set; }

        /// <summary> 粒子伤害计算基准点，粒子的表现位置有特效处理，此数值只对碰撞计算有影响</summary>
        public Example.SkillUnit.BasePoint BasePoint { get; set; }

        /// <summary>  buff生效延迟</summary>
        public int MoveDelay { get; set; }

        /// <summary>	技能粒子波次</summary>
        public int Waves { get; set; }

        /// <summary>	技能伤害间隔</summary>
        public int WaveDelay { get; set; }

        /// <summary> 	碰撞体</summary>
        public Example.SkillShape HitArea { get; set; }

        /// <summary>	技能最大作用数量</summary>
        public int MaxInfluence { get; set; }

    }

    public partial class SkillHelix
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        /// <summary>	运动阶段的持续时间</summary>
        public int MoveTime { get; set; }

        /// <summary>	曲线最大半径</summary>
        public float MaxRadius { get; set; }

        /// <summary>	技能最大作用数量</summary>
        public int MaxInfluence { get; set; }

        /// <summary> 碰撞体</summary>
        public Example.SkillShape HitArea { get; set; }

        /// <summary>	技能是否可穿透</summary>
        public bool CanPierce { get; set; }

        /// <summary> 粒子偏移量</summary>
        public Example.Vector3f Offset { get; set; }

    }

    public partial class SkillAreaRand
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        public Example.SkillUnit.ReferPoint ReferPoint { get; set; }

        public Example.SkillUnit.BasePoint BasePoint { get; set; }

        /// <summary>  子技能id</summary>
        public int UnitID { get; set; }

        /// <summary>	技能粒子数</summary>
        public int UnitCount { get; set; }

        /// <summary> 产生粒子区域</summary>
        public Example.SkillShape Area { get; set; }

    }

    public partial class SkillFollow
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        /// <summary>	最大跟踪时间</summary>
        public int MaxFollowTime { get; set; }

        /// <summary>	运动阶段的速率</summary>
        public float Speed { get; set; }

        /// <summary>	粒子波次</summary>
        public int Waves { get; set; }

        /// <summary>  波次间隔时间</summary>
        public int WaveDelay { get; set; }

        /// <summary>  碰撞体</summary>
        public Example.SkillShape HitArea { get; set; }

        /// <summary> 粒子偏移量</summary>
        public Example.Vector3f Offset { get; set; }

    }

    public partial class SkillJump
    {
        public enum JumpType
        {
            JUMP_NONE = 0,
            /// <summary>	朝着目标跳</summary>
            EMENY = 1,
            /// <summary>	按照自己的方向跳</summary>
            FRIEND = 2,
        }

        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        /// <summary>	运动阶段的持续时间</summary>
        public int MoveTime { get; set; }

        /// <summary>	运动阶段的速率</summary>
        public float Speed { get; set; }

        /// <summary> 	跳跃高度</summary>
        public float Height { get; set; }

        /// <summary> 	跳跃目标类型</summary>
        public Example.SkillJump.JumpType jumpType { get; set; }

        /// <summary>	技能最大作用数量</summary>
        public int MaxInfluence { get; set; }

        /// <summary>  移动过程中的碰撞体</summary>
        public Example.SkillShape HitArea { get; set; }

    }

    public partial class SkillBackStab
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        public Example.SkillUnit.ReferPoint ReferPoint { get; set; }

        public Example.SkillUnit.BasePoint BasePoint { get; set; }

        /// <summary>  buff生效延迟</summary>
        public int MoveDelay { get; set; }

        /// <summary>  碰撞体</summary>
        public Example.SkillShape HitArea { get; set; }

        /// <summary>	技能最大作用数量</summary>
        public int MaxInfluence { get; set; }

    }

    public partial class SkillRotation
    {
        /// <summary>	静态ID, 从1开始 [1 - ~]</summary>
        public int Id { get; set; }

        /// <summary>  buff生效延迟</summary>
        public int MoveDelay { get; set; }

        /// <summary>	技能粒子波次</summary>
        public int Waves { get; set; }

        /// <summary>	技能伤害间隔</summary>
        public int WaveDelay { get; set; }

        /// <summary> 	碰撞体</summary>
        public Example.SkillShape HitArea { get; set; }

        /// <summary>	技能最大作用数量</summary>
        public int MaxInfluence { get; set; }

    }

    public partial class AllSkillUnits
    {
        public Example.AllStringID StringID { get; set; }

        public List<Example.SkillUnit> Units { get; set; }

        public List<Example.SkillArt> Arts { get; set; }

        public List<Example.SkillLine> SingeLines { get; set; }

        public List<Example.SkillMultiLine> MultLines { get; set; }

        public List<Example.SkillArea> Areas { get; set; }

        public List<Example.SkillHelix> Helixes { get; set; }

        public List<Example.SkillAreaRand> AreaRands { get; set; }

        public List<Example.SkillFollow> Follows { get; set; }

        public List<Example.SkillJump> Jumps { get; set; }

        public List<Example.SkillBackStab> BackStabs { get; set; }

        public List<Example.SkillRotation> Rotations { get; set; }

    }

    public partial class EffectConfig
    {
        public enum LifeTime
        {
            AUTO = 0,
            GLOBAL = 1,
        }

        public enum PosType
        {
            FEET = 0,
            BODY = 1,
            HEAD = 2,
            BONE = 3,
            RELATIVE = 4,
            WORLD = 5,
        }

        public int Id { get; set; }

        public string EffectName { get; set; }

        public Example.EffectConfig.PosType posType { get; set; }

        public Example.Vector3f Position { get; set; }

        public string BoneName { get; set; }

        public Example.EffectConfig.LifeTime lifeTime { get; set; }

    }

    /// <summary>	所有状态</summary>
    public partial class AllEffectConfig
    {
        public List<Example.EffectConfig> Effects { get; set; }

        public Example.AllStringID StringID { get; set; }

    }

}
